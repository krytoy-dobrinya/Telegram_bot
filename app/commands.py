import random
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BufferedInputFile
from config import *
from sqlalchemy import text, select
from database import Database
from sqlalchemy.ext.asyncio import AsyncSession
from models import Message, User
from sqlalchemy import desc
from functools import partial
import logging
from openai import AsyncOpenAI
from config import VK_CLIENT_ID, VK_REDIRECT_URI




logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = AsyncOpenAI(api_key=GPT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏
async def open_image(image_path, message, phrase):
    try:
        with open(image_path, "rb") as photo_file:
            await message.answer_photo(
                BufferedInputFile(
                    photo_file.read(),
                    filename=image_path.name
                ),
                caption=phrase
            )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


# /start
async def cmd_start(message: types.Message, session: AsyncSession):
    try:
        user = await session.get(User, message.from_user.id)
        if not user:
            user = User(id=message.from_user.id, username=message.from_user.username)
            session.add(user)
            await session.commit()  # –Ø–≤–Ω—ã–π commit –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!")
    except Exception as e:
        await session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")


# /help
async def cmd_help(message: types.Message):
    await message.answer("–ö–∞–∫–æ–π –∫ —á–µ—Ä—Ç—É help? –¢—ã –Ω–µ —Ä—É—Å—Å–∫–∏–π —á—Ç–æ –ª–∏? –ü–∏—à–∏ –ø–æ –Ω–∞—à–µ–º—É '/–ø–æ–º–æ–≥–∏'")


# /–ø–æ–º–æ–≥–∏
async def cmd_pomogi(message: types.Message):
    help_text = """
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –¢—É—Ç —Ç–∞–∫ –Ω–µ –≥–æ–≤–æ—Ä—è—Ç
/–ø–æ–º–æ–≥–∏ - –ê –≤–æ—Ç —Ç–∞–∫ —Ç—É—Ç –≥–æ–≤–æ—Ä—è—Ç
/—Å–º–µ—à–Ω—è–≤–∞ - –ù—É —Å–º–µ—à–Ω—è–≤—É –≤–∫–∏–Ω—É
/–ª—É—Ç - –ü–æ–∫–∞–∂—É —á—Ç–æ –≤—ã–Ω–µ—Å –∏–∑ —Ä–µ–π–¥–∞
/–±–∞–∑–∞ - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –±–∞–∑–∞
/re_chat - –ö—Ç–æ –∑–Ω–∞–µ—Ç —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ...
/auth - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –í–ö
    """
    await message.answer(help_text)


# /—Å–º–µ—à–Ω—è–≤–∞
async def cmd_smeshnyava(message: types.Message):
    images = [f for f in IMAGES_DIR.glob("*") 
                if f.suffix.lower() in (".jpg", ".jpeg", ".png")]
    
    if not images:
        await message.answer("–°–º–µ—à–Ω—è–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—É–¥–µ—Ç(")
        return
        
    random_image = random.choice(images)
    random_phrase = random.choice(RANDOM_JOKE_PHRASES)
    
    await open_image(random_image, message, random_phrase)


# /–ª—É—Ç
async def cmd_loot(message: types.Message):
    if not LOOT_IMAGE.exists():
        await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–π–¥ –±—ã–ª...")
        return
    
    random_phrase = random.choice(RANDOM_LOOT_PHRASES)
    
    await open_image(LOOT_IMAGE, message, random_phrase)


# /–±–∞–∑–∞
async def cmd_db_check(message: types.Message, db):
    try:
        async with db.engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
            await message.answer("–ë–∞–∑–∞ –µ—Å—Ç—å")
    except Exception as e:
        await message.answer(f"–°–µ–≥–æ–¥–Ω—è –±–µ–∑ –±–∞–∑—ã... : {str(e)}")


# /re_chat
async def cmd_re_chat(message: types.Message, session: AsyncSession):
    user_id = message.from_user.id
    username = message.from_user.username
    
    try:
        user = await session.get(User, user_id)
        if not user:
            user = User(id=user_id, username=username)
            session.add(user)
            await session.commit()
        
        messages = await session.execute(
            select(Message)
            .where(Message.user_id == user_id)
            .order_by(desc(Message.id))
            .limit(10)
        )
        messages = messages.scalars().all()
        
        if not messages:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ!")
            return
        
        message_history = [msg.text for msg in messages]
        response = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"
        response += "\n\n".join(f"‚û° {text}" for text in message_history)
        
        await message.answer(response)
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await session.rollback()


# /–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å ChatGPT
async def get_chatgpt_response(text: str, user_id: int, session: AsyncSession) -> str:
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = await session.execute(
            select(Message)
            .where(Message.user_id == user_id)
            .order_by(desc(Message.id))
            .limit(5)
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º chat_history
        chat_history = [
            {"role": "system", "content": GPT_LORE}
        ] + [
            {"role": "user", "content": msg.text.strip()}
            for msg in messages.scalars().all()
            if msg.text and msg.text.strip()
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_history.append({"role": "user", "content": text.strip()})
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (—Å await!)
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=chat_history,
            max_tokens=500
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ ChatGPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å."


# /auth - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK
async def cmd_auth(message: types.Message):
    try:
        client_id = VK_CLIENT_ID
        redirect_uri = VK_REDIRECT_URI
        scope = "offline"  # offline –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è refresh_token
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–æ—á–Ω–æ–º —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        auth_url = f'https://oauth.vk.com/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}&response_type=code&state={message.from_user.id}'
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ VK",
            url=auth_url
        ))
        
        await message.answer(
            "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /auth: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    


# /–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
async def handle_regular_message(message: types.Message, session: AsyncSession):
    if message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    
    try:
        response = await get_chatgpt_response(
            message.text, 
            message.from_user.id, 
            session
        )
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")





# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –∫–æ–º–∞–Ω–¥
def setup_commands_router(router: Router, db_pool) -> None:
    router.message.register(
        partial(cmd_start, session=db_pool),
        Command("start")
    )
    router.message.register(cmd_help, Command("help"))
    router.message.register(cmd_pomogi, Command("–ø–æ–º–æ–≥–∏"))
    router.message.register(cmd_smeshnyava, Command("—Å–º–µ—à–Ω—è–≤–∞"))
    router.message.register(cmd_loot, Command("–ª—É—Ç"))
    router.message.register(
        partial(cmd_re_chat, session=db_pool),
        Command("re_chat")
    )
    router.message.register(
        partial(cmd_db_check, db=db_pool),
        Command("–±–∞–∑–∞")
    )
    
    router.message.register(cmd_auth, Command("auth"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    router.message.register(
        partial(handle_regular_message, session=db_pool)
    )
    
